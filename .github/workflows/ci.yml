# .github/workflows/ci.yml

# Nom du workflow
name: CI Pipeline

# Événements qui déclenchent le workflow
on:
  push:  # Lorsque du code est poussé
    branches:
      - main  # Sur la branche principale
  pull_request:  # Lorsqu'une pull request est ouverte
    branches:
      - main  # Sur la branche principale

# Définition des jobs
jobs:
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Run black
        run: poetry run black . --check

      - name: Run isort
        run: poetry run isort . --check-only

      - name: Run flake8
        run: poetry run flake8 .

      - name: Run mypy
        run: poetry run mypy .

      - name: Run tests with coverage
        run: poetry run pytest --cov=domaining --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Security vulnerabilities scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run bandit
        run: |
          poetry install
          poetry run bandit -r domaining/

  build:
    name: Build Package
    needs: [quality, security]
    runs-on: ubuntu-latest  # Environnement dans lequel le job s'exécute
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:  # Liste des étapes à exécuter dans le job
    - name: Checkout code  # Étape pour récupérer le code du dépôt
      uses: actions/checkout@v4  # Utilisation de l'action checkout

    - name: Set up Python  # Étape pour configurer Python
      uses: actions/setup-python@v5  # Utilisation de l'action setup-python
      with:
        python-version: '3.12'  # Version de Python à utiliser

    - name: Install dependencies  # Étape pour installer les dépendances
      run: |  # Commandes à exécuter
        python -m pip install --upgrade pip  # Mettre à jour pip
        pip install poetry  # Installer Poetry
        poetry install  # Installer les dépendances définies dans pyproject.toml

    - name: Run tests  # Étape pour exécuter les tests
      run: poetry run pytest  # Exécuter les tests avec Pytest via Poetry
