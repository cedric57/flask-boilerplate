# ---------------------------------------------------------------------------- #
#                                Configuration Globale                         #
# ---------------------------------------------------------------------------- #

exclude: |
  (?x)^(
      .*\{\{.*\}\}.*|     # Exclude any files with cookiecutter variables
      docs/site/.*|       # Exclude mkdocs compiled files
      docs/docs/jupyter-notebooks_files/.*|       # Exclude Jupyter Notebooks files
      jupyter-experiments/.*|       # Exclude jupyter-experiments
      \.history/.*|       # Exclude history files
      .*cache.*/.*|       # Exclude cache directories
      .*venv.*/.*|        # Exclude virtual environment directories
      .*idea.*/.*|        # Exclude PyCharm directories
  )$
fail_fast: true # Arrête l'exécution des hooks dès qu'une erreur est détectée
default_language_version:
  python: python3.12 # Version de Python utilisée par défaut pour les hooks
default_install_hook_types:
  - pre-commit # Active les hooks de type "pre-commit"
  - commit-msg # Active les hooks de type "commit-msg"

ci:
  autofix_prs: true
  autofix_commit_msg: "[pre-commit.ci] Fixing issues with pre-commit"
  autoupdate_schedule: weekly
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit automatically updated revs."
  skip: [pytest-collect, pytest-fast] # Optionally list ids of hooks to skip on CI

repos:
  # ---------------------------------------------------------------------------- #
  #                              🔄 Pre-Commit Hooks                             #
  # ---------------------------------------------------------------------------- #

  # ----------------------------- 🔒 Security Tools ---------------------------- #
  # GitLeaks is a fast, lightweight scanner that prevents secrets (passwords, API keys, tokens) from being committed
  # to your repository.
  # Note: TruffleHog is a more comprehensive but complex alternative to GitLeaks.
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.24.2
    hooks:
      - id: gitleaks
        name: "🔒 security · Detect hardcoded secrets"

  # Bandit is a security tool for analyzing Python code to detect potential vulnerabilities. It performs static
  # analysis, scanning the code without executing it, to identify unsafe practices like the use of dangerous
  # functions (eval()), improper handling of user input (e.g., injection risks), or weak cryptographic configurations.
  # Bandit generates a detailed report ranking issues by severity (low, medium, high), helping developers fix security
  # flaws early in the development process. It's ideal for promoting secure coding practices.
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.3
    hooks:
      - id: bandit
        name: "🔒 security · Python security vulnerability scanner"
        args: ["-c", "pyproject.toml", "-r", "."]
        additional_dependencies: ["bandit[toml]"]

  # --------------------------- 🔍 Code Quality Tools -------------------------- #

  # Hooks généraux fournis par Pre-Commit
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Guard rails
      - id: check-ast
        name: "↩️ hook - Check Python Syntax (AST)"
      - id: check-json
        name: "↩️ hook - Validate JSON Syntax"
      - id: check-toml
        name: "↩️ hook - Validate TOML Syntax"
      - id: check-yaml
        name: "↩️ hook - Validate YAML Syntax"
      # Formatters
      - id: end-of-file-fixer
        name: "↩️ hook - Ensure File Ends with Newline"
      - id: mixed-line-ending
        name: "↩️ hook - Enforce Consistent Line Endings"
      - id: trailing-whitespace
        name: "↩️ hook - Trim Trailing Whitespace"
      # Code Checkers
      - id: check-docstring-first
        name: "↩️ hook - Check Module Docstring Position"
      - id: debug-statements
        name: "↩️ hook - Detect Debugger Statements"
      - id: detect-private-key
        name: "↩️ hook - Scan for Secrets/Private Keys"
      - id: fix-byte-order-marker
        name: "↩️ hook - Remove UTF-8 BOM"

  ### Python Tools ###
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.2
    hooks:
      - id: ruff
        name: "🐍 python · Lint and perform safe auto-fixes with Ruff"
        args: [--fix, --exit-zero, --show-fixes]
      - id: ruff-format
        name: "🐍 python · Format with Ruff"

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
      - id: mypy
        name: "🐍 python · Check types"
        args: ["--explicit-package-bases"]
        additional_dependencies:
          [
            "types-setuptools",
            "types-requests",
            "types-python-dateutil",
            "types-PyYAML",
            "dnspython",
            "pydantic",
          ]

  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.24.1
    hooks:
      - id: validate-pyproject
        name: "🐍 python · Validate pyproject.toml"
        additional_dependencies: ["validate-pyproject-schema-store[all]"]

  ### Javascript & Web Tools ###
  - repo: https://github.com/biomejs/pre-commit
    rev: "v1.9.4"
    hooks:
      - id: biome-check
        name: "🟨 javascript · Lint, format, and safe fixes with Biome"
        additional_dependencies: ["@biomejs/biome@1.9.4"]

  ### Data & Config Validation ###
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.31.3
    hooks:
      - id: check-github-workflows
        name: "🐙 github-actions · Validate gh workflow files"
        args: ["--verbose"]
      - id: check-taskfile
        name: "✅ taskfile · Validate Task configuration"

  ### Markdown ###
  - repo: https://github.com/hukkin/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat
        name: "📝 markdown · Format markdown"
        additional_dependencies:
          - mdformat-pyproject
          - mdformat-gfm
          - mdformat-gfm-alerts
          - mdformat-tables
          - mdformat-ruff
          - mdformat-frontmatter
          - ruff

  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.44.0
    hooks:
      - id: markdownlint
        name: "📝 markdown · Lint markdown"
        args: [--disable=MD013]

  ### Shell ###
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: "🐚 shell · Lint shell scripts"

  - repo: https://github.com/openstack/bashate
    rev: 2.1.1
    hooks:
      - id: bashate
        name: "🐚 shell · Check shell script code style"

  ### Makefile ###
  #- repo: https://github.com/mrtazz/checkmake.git
  #  rev: 0.2.2
  #  hooks:
  #    - id: checkmake
  #      name: "🐮 Makefile · Lint Makefile"

  ### SQL ###
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.3.1
    hooks:
      - id: sqlfluff-fix
        name: "📊 SQL · Attempts to fix rule violations."
      # STRICT
      - id: sqlfluff-lint
        name: "📊 SQL · Lint SQL code files"

  ### Notebooks ###
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.9.1
    hooks:
      - id: nbqa
        entry: nbqa mdformat
        name: "📓 notebook · Format markdown cells"
        args: ["--nbqa-md"]
        types: [jupyter]
        additional_dependencies:
          - mdformat
          - mdformat-gfm
          - mdformat-ruff
          - mdformat-frontmatter
          - ruff
      # STRICT
      # TODO: Convert to pyright
      - id: nbqa-mypy
        name: "📓 notebook · Type-check cells"

  ### PNG Images ###
  - repo: https://github.com/shssoichiro/oxipng
    rev: v9.1.4
    hooks:
      - id: oxipng
        name: "🖼️ images · Optimize PNG files"
        args: ["-o", "4", "--strip", "safe", "--alpha"]

  ### Additional File Types ###
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: "✨ misc-files · Format misc web files"
        args:
          - "--write"
        types_or: [yaml, html, scss, toml]
        additional_dependencies:
          - prettier@3.4.2

  # ---------------------------- 📁 Filesystem Tools --------------------------- #

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Filesystem Checks
      - id: check-executables-have-shebangs
        name: "📁 filesystem/⚙️ exec · Verify shebang presence"
      - id: check-shebang-scripts-are-executable # Verifies that shebang scripts (starting with #!/) are executable
        name: "📁 filesystem/⚙️ exec · Verify script permissions"
      - id: check-case-conflict # checks for files that would conflict in case-insensitive filesystems.
        name: "📁 filesystem/📝 names · Check case sensitivity"
      - id: check-illegal-windows-names
        name: "📁 filesystem/📝 names · Validate Windows filenames"
      - id: check-symlinks
        name: "📁 filesystem/🔗 symlink · Check symlink validity"
      - id: destroyed-symlinks
        name: "📁 filesystem/🔗 symlink · Detect broken symlinks"
      # ------------------------------- 🌳 Git Tools ------------------------------- #
      - id: check-merge-conflict # checks for files that contain merge conflict strings.
        name: "🌳 git · Detect conflict markers"
      - id: forbid-new-submodules
        name: "🌳 git · Prevent submodule creation"
      - id: no-commit-to-branch
        name: "🌳 git · Protect main branches"
        args: ["--branch", "main", "--branch", "master"]
      - id: check-added-large-files # Ensures that large files are not accidentally added to the repository
        name: "🌳 git · Block large file commits"
        args: ["--maxkb=5000"]

  # ---------------------------------------------------------------------------- #
  #                            📝 Commit Message Hooks                           #
  # ---------------------------------------------------------------------------- #
  #
  # --------------------------- ✍️ Git Commit Quality -------------------------- #

  ### Commit Message Standards ###
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.4.1
    hooks:
      - id: commitizen
        name: "🌳 git · Validate commit message with Commitizen"
        stages: [commit-msg]
        additional_dependencies: [cz-conventional-gitmoji]
      - id: commitizen-branch
        stages: [pre-push]

  - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook
    rev: v9.22.0
    hooks:
      - id: commitlint
        name: "🌳 git · Validate commit message with Commitlint"
        stages: [commit-msg]
        additional_dependencies:
          ["@commitlint/cli", "@commitlint/config-conventional"]

  # ---------------------------------------------------------------------------- #
  #                             🧪 Fast Tests (Local)                            #
  # ---------------------------------------------------------------------------- #

  - repo: local
    hooks:
      - id: pytest-collect
        name: 🧪 test · Validate test formatting
        entry: poetry run pytest tests
        language: system
        types: [python]
        args: ["--collect-only"]
        pass_filenames: false
        always_run: true
      # STRICT
      - id: pytest-fast
        name: 🧪 test · Run fast tests
        entry: poetry run pytest tests
        language: system
        types: [python]
        #args: ["--max-timeout=3"]
        pass_filenames: false
        always_run: true
