# ---------------------------------------------------------------------------- #
#                                Build System                                  #
# ---------------------------------------------------------------------------- #

[build-system]
requires = ["poetry-core"]  # Dépendances nécessaires pour construire le projet.
build-backend = "poetry.core.masonry.api"  # Backend utilisé pour la construction du projet.

# ---------------------------------------------------------------------------- #
#                              Project Metadata                               #
# ---------------------------------------------------------------------------- #

[tool.poetry]
name = "flask-boilerplate"  # Nom du projet.
version = "0.1.0"  # Version actuelle du projet (utilisez Semantic Versioning).
description = "A Flask boilerplate project"  # Description succincte du projet.
authors = ["Cedric Grun <cedric.grun@gmail.com>"]  # Auteur(s) du projet.
license = "MIT"  # Licence utilisée pour le projet.
readme = "README.md"  # Fichier README principal.
homepage = "https://github.com/cedric57/flask-boilerplate"  # URL de la page d'accueil du projet.
repository = "https://github.com/cedric57/flask-boilerplate"  # URL du dépôt Git.
documentation = "https://flask-boilerplate.readthedocs.io"  # URL de la documentation du projet.
packages = [
    { include = "flask_boilerplate", from = "src" }  # Spécifie les packages Python à inclure.
]

# ---------------------------------------------------------------------------- #
#                             Dependencies                                     #
# ---------------------------------------------------------------------------- #

[tool.poetry.dependencies]
python = "^3.12"  # Version de Python requise (compatible avec 3.12+).
flask = "^3.1.2"  # Framework Flask utilisé pour le développement web.
jinja2 = "^3.1.6"  # Moteur de templating utilisé par Flask.
sqlalchemy = "^2.0.43"  # ORM pour interagir avec la base de données.
alembic = "^1.16.5"  # Outil pour gérer les migrations de base de données.

[tool.poetry.group.dev.dependencies]
pytest-cov = "^7.0.0"  # Extension pour mesurer la couverture de code.
mypy = "^1.17.1"  # Vérificateur de typage statique.
bandit = "^1.8.6"  # Analyseur de sécurité pour détecter les vulnérabilités.
safety = "^3.6.0"  # Outil pour vérifier les dépendances pour les vulnérabilités connues.
ruff = "^0.12.10"  # Linter et formateur de code rapide.
conventional-pre-commit = "^4.2.0"  # Hook pour valider les messages de commit selon les conventions.
commitizen = "^4.8.3"
pre-commit = "^4.2.0"
pytest = "^8.4.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.2.3"
sphinx-rtd-theme = "^3.0.2"
sphinx-autodoc-typehints = "^3.2.0"
sphinxcontrib-mermaid = "^1.0.0"

[tool.poetry.extras]
docs = ["sphinx"]  # Dépendances optionnelles pour générer la documentation.

[tool.taskipy.tasks]
build-docs = "sphinx-build -b html docs/source docs/_build"

# ---------------------------------------------------------------------------- #
#                             ruff formatter/linter                            #
# ---------------------------------------------------------------------------- #

# ----------------------------- ruff global config ----------------------------- #

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]  # Liste des dossiers/fichiers à exclure de l'analyse.
line-length = 120  # Longueur maximale des lignes de code.

# ----------------------------- Linting Config ------------------------------- #

[tool.ruff.lint]
preview = true  # Active les règles expérimentales.
select = [
    "E", "W",  # pycodestyle (erreurs de style).
    "F",       # Pyflakes (erreurs de syntaxe).
    "UP",      # pyupgrade (modernisation du code).
    "B",       # flake8-bugbear (erreurs subtiles).
    "SIM",     # flake8-simplify (simplification du code).
    "I"        # isort (tri des imports).
]  # Règles activées pour l'analyse.
ignore = []  # Règles à ignorer (aucune ici).
fixable = ["ALL"]  # Autorise la correction automatique de tous les problèmes fixables.

# ----------------------------- Formatting Config ---------------------------- #

[tool.ruff.format]
preview = true  # Active les fonctionnalités expérimentales de formatage.
quote-style = "double"  # Comme Black, utilise des guillemets doubles pour les chaînes de caractères
indent-style = "space"  # Comme Black, indente avec des espaces au lieu de tabulations.
skip-magic-trailing-comma = false  # Comme Black, respecte les virgules magiques.
line-ending = "auto"  # Comme Black, détecte automatiquement le type de fin de ligne.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false  # Désactive le formatage des exemples de code dans les docstrings.

# Set the line length limit used when formatting code snippets in docstrings.
# This only has an effect when the `docstring-code-format` setting is enabled.
docstring-code-line-length = "dynamic"  # Longueur de ligne dynamique pour les exemples de code.

# ----------------------------- ISort Config --------------------------------- #

[tool.ruff.lint.isort]
order-by-type = true  # Trie les imports par type (standards, tiers, locaux).
relative-imports-order = "closest-to-furthest"  # Trie les imports relatifs par proximité.
extra-standard-library = ["typing"]  # Ajoute des modules standards supplémentaires.
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []  # Modules internes au projet.

# ----------------------------- Pydocstyle Config ---------------------------- #

[tool.ruff.lint.pydocstyle]
convention = "google"  # Convention de style pour les docstrings.

# ---------------------------------------------------------------------------- #
#                                   MyPy                                       #
# ---------------------------------------------------------------------------- #

[tool.mypy]
python_version = "3.12"  # Version de Python utilisée pour l'analyse.
warn_return_any = true  # Avertissements pour les fonctions retournant `Any`.
warn_unused_configs = true  # Avertissements pour les configurations inutilisées.
disallow_untyped_defs = true  # Interdit les définitions non typées.
check_untyped_defs = true  # Vérifie les définitions non typées.
ignore_missing_imports = false  # Affiche des erreurs pour les imports manquants.
strict = true  # Active toutes les vérifications strictes.
mypy_path = "src"  # Chemin vers les sources à analyser.

# ---------------------------------------------------------------------------- #
#                                   Bandit                                     #
# ---------------------------------------------------------------------------- #
[tool.bandit]
exclude_dirs = [
    "venv",
    "./.venv",
    "tests",
    ".git",
    "__pycache__",
]  # Dossiers à exclure de l'analyse de sécurité.

# ---------------------------------------------------------------------------- #
#                                   Pytest                                     #
# ---------------------------------------------------------------------------- #

[tool.pytest.ini_options]
addopts = """
--tb=long
--code-highlight=yes
--color=yes
-vv
--cov=src
--cov-report=term-missing
--cov-report=html
--cov-branch
"""
testpaths = ["tests"]  # Chemins où Pytest recherche les tests.
pythonpath = ["src"]

# ---------------------------------------------------------------------------- #
#                                  Coverage                                    #
# ---------------------------------------------------------------------------- #
[tool.coverage.run]
branch = true
omit = [
    "*/__init__.py",
    "tests/*",
    "src/flask_boilerplate/domain/primitives/*",
    "src/flask_boilerplate/domain/enums/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    ]

ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

# ---------------------------------------------------------------------------- #
#                                 Commitizen                                   #
# ---------------------------------------------------------------------------- #

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "poetry"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "VERSION",
    "setup.py",
    "pyproject.toml:version"
]
bump_message = "bump: version $current_version → $new_version"
update_changelog_on_bump = true
annotated_tag = true
