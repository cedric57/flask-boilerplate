name: CI Features & Develop

# Événements qui déclenchent le workflow
on:
  push: # Lorsque du code est poussé
    branches:
      - "feature/**" # Toute branche feature
  pull_request:
    branches:
      - "develop"

# Définition des jobs
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v5 # Récupère le code source du dépôt

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5 # Configure la version de Python spécifiée
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #       install & configure poetry
      #----------------------------------------------
      - name: Install Python poetry
        uses: snok/install-poetry@v1 # Installe Poetry pour gérer les dépendances
        with:
          virtualenvs-create: true # Crée un environnement virtuel
          virtualenvs-in-project: true # Place l'environnement virtuel dans le projet
          virtualenvs-path: .venv # Chemin de l'environnement virtuel
          installer-parallel: true # Active l'installation parallèle des dépendances

      - name: Verify Poetry installation
        run: poetry --version # Vérifie que Poetry est correctement installé

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4 # Cache les dépendances pour accélérer les builds futurs
        with:
          path: |
            .venv
            ~/.local
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #-----------------------------------------------
      # install dependencies if cache does not exist
      #-----------------------------------------------
      - name: Install dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' # Installe les dépendances uniquement si le cache n'existe pas
        run: |
          poetry lock # Met à jour le fichier poetry.lock
          poetry install --no-interaction --no-root # Installe les dépendances sans interaction utilisateur

      - name: Run tests with coverage
        run: poetry run pytest --doctest-modules --junitxml=junit.xml -o junit_family=legacy --cov=src tests --cov-report=xml --cov-report=html # Exécute les tests avec Pytest et génère un rapport de couverture

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5 # Envoie les résultats de couverture à Codecov
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }} # N'exécute cette étape que si le job n'a pas été annulé
        uses: codecov/test-results-action@v1 # Envoie les résultats des tests à Codecov
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Dependency vulnerability check with Safety
        uses: pyupio/safety-action@v1 # Vérifie les vulnérabilités des dépendances avec Safety
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
