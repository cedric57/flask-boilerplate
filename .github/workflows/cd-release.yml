name: CD Release

on:
  push:
    branches:
      - release/* # Trigger this workflow when pushing to any 'release/*' branch

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    strategy:
      matrix:
        python-version: [ "3.12" ]

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4 # Récupère le code source du dépôt

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5 # Configure la version de Python spécifiée
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #       install & configure poetry
      #----------------------------------------------
      - name: Install Python poetry
        uses: snok/install-poetry@v1 # Installe Poetry pour gérer les dépendances
        with:
          virtualenvs-create: true # Crée un environnement virtuel
          virtualenvs-in-project: true # Place l'environnement virtuel dans le projet
          virtualenvs-path: .venv # Chemin de l'environnement virtuel
          installer-parallel: true # Active l'installation parallèle des dépendances

      - name: Verify Poetry installation
        run: poetry --version # Vérifie que Poetry est correctement installé

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        shell: bash
        run: |
          poetry lock # Met à jour le fichier poetry.lock
          poetry install --no-interaction --no-root # Installe les dépendances sans interaction utilisateur

      - name: Run tests
        run: poetry run pytest

      - name: Build Docker image
        run: docker build -t flask-boilerplate:${{ github.sha }} .

      - name: Deploy to staging
        env:
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
        run: ./deploy-to-staging.sh
