name: Snyk Security

on:
  push:
    branches: ["main", "develop", "feature/*", "release/*", "hotfix/*"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 0 * * 0" # Exécute une analyse chaque dimanche à minuit UTC

permissions:
  contents: read

jobs:
  snyk:
    name: Run Snyk Security Scan
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.12
        id: setup-python
        uses: actions/setup-python@v5 # Configure la version de Python spécifiée
        with:
          python-version: "3.12"

      #-----------------------------------------------
      #       install & configure poetry
      #-----------------------------------------------
      - name: Install Python poetry
        uses: snok/install-poetry@v1 # Installe Poetry pour gérer les dépendances
        with:
          virtualenvs-create: true # Crée un environnement virtuel
          virtualenvs-in-project: true # Place l'environnement virtuel dans le projet
          virtualenvs-path: .venv # Chemin de l'environnement virtuel
          installer-parallel: true # Active l'installation parallèle des dépendances

      - name: Verify Poetry installation
        run: poetry --version # Vérifie que Poetry est correctement installé

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4 # Cache les dépendances pour accélérer les builds futurs
        with:
          path: |
            .venv
            ~/.local
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' # Installe les dépendances uniquement si le cache n'existe pas
        run: |
          poetry lock # Met à jour le fichier poetry.lock
          poetry install --no-interaction --no-root # Installe les dépendances sans interaction utilisateur

      - name: Security analysis with Snyk
        uses: snyk/actions/python@master # Analyse la sécurité du code avec Snyk
        continue-on-error: true # Continue même en cas d'erreur
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk-test.sarif

      - name: Run Snyk Code Test
        continue-on-error: true
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk-code.sarif

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        continue-on-error: true
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload Snyk Open Source Test Results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-test.sarif

      - name: Upload Snyk Code Test Results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif
