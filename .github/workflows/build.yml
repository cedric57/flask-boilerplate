name: CI Pipeline

# Événements qui déclenchent le workflow
on:
  push: # Lorsque du code est poussé
    branches:
      - main # Sur la branche principale
  pull_request: # Lorsqu'une pull request est ouverte
    branches:
      - main # Sur la branche principale

# Définition des jobs
jobs:
  setup:
    name: "Install Poetry and configure cache"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Verify Poetry installation
        run: poetry --version

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      # Poetry cache depends on OS, Python version and Poetry version.
      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.local
            ~/.cache/pre-commit
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '.pre-commit-config.yaml', '~/.cache/pre-commit/*') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry lock
          poetry install --no-interaction --no-root

      #----------------------------------------------
      # install pre-commit hooks if cache does not exist
      #----------------------------------------------
      - name: Run pre-commit install-hooks
        run: poetry run pre-commit install --install-hooks

  quality:
    name: "Code Quality & Tests"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore .venv from cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .venv
            ~/.local
            ~/.cache/pre-commit
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '.pre-commit-config.yaml', '~/.cache/pre-commit/*') }}

      - name: Activate environment
        shell: bash
        run: source .venv/bin/activate

      - name: Run pre-commit on all files
        run: poetry run pre-commit run --all-files --color=always --show-diff-on-failure

      - name: Run tests with coverage
        run: poetry run pytest --doctest-modules --junitxml=junit.xml -o junit_family=legacy --cov=src tests --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: "Security Checks"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #- name: Restore .venv from cache
      #  uses: actions/cache@v4
      #  with:
      #    path: |
      #      .venv
      #      ~/.local
      #    key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #- name: Activate environment
      #  shell: bash
      #  run: source .venv/bin/activate

      #- name: Security analysis with Bandit
      #  run: poetry run bandit .

      - name: Dependency vulnerability check with Safety
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

      - name: Security analysis with Snyk
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  build:
    name: "Build Package"
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps: # Liste des étapes à exécuter dans le job
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore .venv from cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.local
            ~/.cache/pre-commit
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock', '.pre-commit-config.yaml', '~/.cache/pre-commit/*') }}

      - name: Activate environment
        shell: bash
        run: source .venv/bin/activate

      - name: Run tests # Étape pour exécuter les tests
        run: poetry run pytest # Exécuter les tests avec Pytest via Poetry
